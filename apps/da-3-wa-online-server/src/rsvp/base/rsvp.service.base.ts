/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Rsvp as PrismaRsvp,
  Guest as PrismaGuest,
  Invitation as PrismaInvitation,
} from "@prisma/client";

export class RsvpServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RsvpCountArgs, "select">): Promise<number> {
    return this.prisma.rsvp.count(args);
  }

  async rsvps<T extends Prisma.RsvpFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RsvpFindManyArgs>
  ): Promise<PrismaRsvp[]> {
    return this.prisma.rsvp.findMany<Prisma.RsvpFindManyArgs>(args);
  }
  async rsvp<T extends Prisma.RsvpFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RsvpFindUniqueArgs>
  ): Promise<PrismaRsvp | null> {
    return this.prisma.rsvp.findUnique(args);
  }
  async createRsvp<T extends Prisma.RsvpCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RsvpCreateArgs>
  ): Promise<PrismaRsvp> {
    return this.prisma.rsvp.create<T>(args);
  }
  async updateRsvp<T extends Prisma.RsvpUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RsvpUpdateArgs>
  ): Promise<PrismaRsvp> {
    return this.prisma.rsvp.update<T>(args);
  }
  async deleteRsvp<T extends Prisma.RsvpDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RsvpDeleteArgs>
  ): Promise<PrismaRsvp> {
    return this.prisma.rsvp.delete(args);
  }

  async getGuest(parentId: string): Promise<PrismaGuest | null> {
    return this.prisma.rsvp
      .findUnique({
        where: { id: parentId },
      })
      .guest();
  }

  async getInvitation(parentId: string): Promise<PrismaInvitation | null> {
    return this.prisma.rsvp
      .findUnique({
        where: { id: parentId },
      })
      .invitation();
  }
}
