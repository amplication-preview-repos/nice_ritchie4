/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rsvp } from "./Rsvp";
import { RsvpCountArgs } from "./RsvpCountArgs";
import { RsvpFindManyArgs } from "./RsvpFindManyArgs";
import { RsvpFindUniqueArgs } from "./RsvpFindUniqueArgs";
import { CreateRsvpArgs } from "./CreateRsvpArgs";
import { UpdateRsvpArgs } from "./UpdateRsvpArgs";
import { DeleteRsvpArgs } from "./DeleteRsvpArgs";
import { Guest } from "../../guest/base/Guest";
import { Invitation } from "../../invitation/base/Invitation";
import { RsvpService } from "../rsvp.service";
@graphql.Resolver(() => Rsvp)
export class RsvpResolverBase {
  constructor(protected readonly service: RsvpService) {}

  async _rsvpsMeta(
    @graphql.Args() args: RsvpCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rsvp])
  async rsvps(@graphql.Args() args: RsvpFindManyArgs): Promise<Rsvp[]> {
    return this.service.rsvps(args);
  }

  @graphql.Query(() => Rsvp, { nullable: true })
  async rsvp(@graphql.Args() args: RsvpFindUniqueArgs): Promise<Rsvp | null> {
    const result = await this.service.rsvp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rsvp)
  async createRsvp(@graphql.Args() args: CreateRsvpArgs): Promise<Rsvp> {
    return await this.service.createRsvp({
      ...args,
      data: {
        ...args.data,

        guest: args.data.guest
          ? {
              connect: args.data.guest,
            }
          : undefined,

        invitation: args.data.invitation
          ? {
              connect: args.data.invitation,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Rsvp)
  async updateRsvp(@graphql.Args() args: UpdateRsvpArgs): Promise<Rsvp | null> {
    try {
      return await this.service.updateRsvp({
        ...args,
        data: {
          ...args.data,

          guest: args.data.guest
            ? {
                connect: args.data.guest,
              }
            : undefined,

          invitation: args.data.invitation
            ? {
                connect: args.data.invitation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rsvp)
  async deleteRsvp(@graphql.Args() args: DeleteRsvpArgs): Promise<Rsvp | null> {
    try {
      return await this.service.deleteRsvp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Guest, {
    nullable: true,
    name: "guest",
  })
  async getGuest(@graphql.Parent() parent: Rsvp): Promise<Guest | null> {
    const result = await this.service.getGuest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Invitation, {
    nullable: true,
    name: "invitation",
  })
  async getInvitation(
    @graphql.Parent() parent: Rsvp
  ): Promise<Invitation | null> {
    const result = await this.service.getInvitation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
