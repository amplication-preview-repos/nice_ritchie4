/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Invitation as PrismaInvitation,
  Guest as PrismaGuest,
  Rsvp as PrismaRsvp,
  User as PrismaUser,
} from "@prisma/client";

export class InvitationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InvitationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.invitation.count(args);
  }

  async invitations<T extends Prisma.InvitationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationFindManyArgs>
  ): Promise<PrismaInvitation[]> {
    return this.prisma.invitation.findMany<Prisma.InvitationFindManyArgs>(args);
  }
  async invitation<T extends Prisma.InvitationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationFindUniqueArgs>
  ): Promise<PrismaInvitation | null> {
    return this.prisma.invitation.findUnique(args);
  }
  async createInvitation<T extends Prisma.InvitationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationCreateArgs>
  ): Promise<PrismaInvitation> {
    return this.prisma.invitation.create<T>(args);
  }
  async updateInvitation<T extends Prisma.InvitationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationUpdateArgs>
  ): Promise<PrismaInvitation> {
    return this.prisma.invitation.update<T>(args);
  }
  async deleteInvitation<T extends Prisma.InvitationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvitationDeleteArgs>
  ): Promise<PrismaInvitation> {
    return this.prisma.invitation.delete(args);
  }

  async findGuests(
    parentId: string,
    args: Prisma.GuestFindManyArgs
  ): Promise<PrismaGuest[]> {
    return this.prisma.invitation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .guests(args);
  }

  async findRsvps(
    parentId: string,
    args: Prisma.RsvpFindManyArgs
  ): Promise<PrismaRsvp[]> {
    return this.prisma.invitation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rsvps(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.invitation
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
