/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Guest as PrismaGuest,
  Rsvp as PrismaRsvp,
  Invitation as PrismaInvitation,
} from "@prisma/client";

export class GuestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GuestCountArgs, "select">): Promise<number> {
    return this.prisma.guest.count(args);
  }

  async guests<T extends Prisma.GuestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuestFindManyArgs>
  ): Promise<PrismaGuest[]> {
    return this.prisma.guest.findMany<Prisma.GuestFindManyArgs>(args);
  }
  async guest<T extends Prisma.GuestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuestFindUniqueArgs>
  ): Promise<PrismaGuest | null> {
    return this.prisma.guest.findUnique(args);
  }
  async createGuest<T extends Prisma.GuestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuestCreateArgs>
  ): Promise<PrismaGuest> {
    return this.prisma.guest.create<T>(args);
  }
  async updateGuest<T extends Prisma.GuestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuestUpdateArgs>
  ): Promise<PrismaGuest> {
    return this.prisma.guest.update<T>(args);
  }
  async deleteGuest<T extends Prisma.GuestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GuestDeleteArgs>
  ): Promise<PrismaGuest> {
    return this.prisma.guest.delete(args);
  }

  async findRsvps(
    parentId: string,
    args: Prisma.RsvpFindManyArgs
  ): Promise<PrismaRsvp[]> {
    return this.prisma.guest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rsvps(args);
  }

  async getInvitation(parentId: string): Promise<PrismaInvitation | null> {
    return this.prisma.guest
      .findUnique({
        where: { id: parentId },
      })
      .invitation();
  }
}
